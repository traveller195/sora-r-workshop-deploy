% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sora_jobs.R
\name{sora_results}
\alias{sora_results}
\alias{sora_jobs}
\alias{sora_job_status}
\alias{sora_job_done}
\alias{sora_job_delete}
\title{Jobs}
\usage{
sora_results(job_id, verbose = NULL, api_key = NULL)

sora_jobs(status = NULL, verbose = NULL, api_key = NULL)

sora_job_status(job_id, verbose = NULL, api_key = NULL)

sora_job_done(job_id, api_key = NULL)

sora_job_delete(job_id, verbose = NULL, api_key = NULL)
}
\arguments{
\item{job_id}{A job ID as returned by \code{\link{sora_request}}.}

\item{verbose}{A logical, character string or \code{NULL} that specifies if
and how to produce messages. If \code{FALSE}, suppresses all informative
messages. If a path is provided, stores all messages in the specified file.
If \code{NULL}, verbosity depends on \code{getOption("sora_verbose")}. Use
the latter to set verbosity across the entire session, e.g. to suppress
messages from all package functions. Defaults to \code{NULL} and
\code{getOption("sora_verbose")} defaults to \code{TRUE}, i.e., display
messages where reasonable.}

\item{api_key}{A valid SoRa API key. Required to communicate with the SoRa
API. You can request a key by filling out
\href{https://sora.gesis.org/unofficial/sora-user-mod/users/request-api-key}{this form}
on the SoRa website.

If \code{NULL}, reads a key from the \code{SORA_API_KEY}
environment variable.

If "ask" (and the session is interactive), opens a masked prompt where you
can enter your key. The entered key is persistently stored in an environment
variable and can be used across sessions.

Please note that you are advised not to enter your key directly using this
argument. If you do, please make sure that you do not publish any code files
containing the key in plain text. Failure to do so can compromise your
access to the SoRa API.}

\item{status}{currently status for the requested linking.}
}
\value{
\itemize{
\item{\code{sora_jobs} returns a dataframe containing each job, their
time of creation and their status}
\item{\code{sora_job_status} returns a list of class \code{sora_status}
containing the job ID, the last status update time, the status and status
details}
\item{\code{sora_job_done} returns \code{TRUE} or \code{FALSE}}
\item{\code{sora_job_delete} returns \code{NULL}, invisibly}
\item{\code{sora_results} returns a dataframe containing the case IDs
and all requested output statistics}
}
}
\description{
Poll, fetch and manage requested SoRa jobs.

\itemize{
\item{\code{sora_results} fetches results from a finished job}
\item{\code{sora_jobs} returns a list of jobs affiliated with an API key}
\item{\code{sora_job_status} returns the detailed status of a specific
job}
\item{\code{sora_job_done} checks whether a job is finished
(not necessarily successful)}
\item{\code{sora_job_delete} removes a job from the SoRa service}
}
}
\examples{
\dontshow{if (isTRUE(Sys.getenv("SORA_RUN_EXAMPLES")) && sora_available()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# First, commission a request
job <- sora_request(
  sora_custom(ber_income, crs = 3035),
  link_to = sora_spatial(id = "ioer-monitor-s11rg-2011-1000m"),
  method = sora_linking(
    "aggregate_attribute",
    selection_area = "circle",
    radius = 20000,
    output = "mean"
  )
)

# Then, you can poll if the status appears in the job list
sora_jobs()

# ... or poll it directly
sora_job_status(job)

# Check if it is finished
while (!sora_job_done(job)) {
  Sys.sleep(1)
}

# Then fetch
sora_results(job)

# Alternatively, remove the job
sora_job_delete(job)
\dontshow{\}) # examplesIf}
}
